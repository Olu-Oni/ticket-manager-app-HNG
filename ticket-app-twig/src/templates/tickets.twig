{% extends 'components/layout.twig' %}

{% block content %}
    <!-- Header with Logout -->
    {% include 'components/header.twig' with {'user': user, 'page': 'Dashboard'} %}

    <main class="mx-[5%] py-4 pb-12">
        <!-- Header: Total + Create Button -->
        <div class="flex justify-between items-center mb-6 p-1.5">
            <div class="sm:flex-1 sm:ml-50 flex gap-2 place-content-center">
                <h3 class="w-fit py-1 max-sm:hidden">Total:</h3>
                <span id="ticket-count" class="text-[var(--background)] backdrop-brightness-90 font-bold rounded-2xl px-2 mt-1 text-nowrap place-content-center h-fit py-1">
                    0 tickets
                </span>
            </div>
            <button id="openCreateModal" class="btn-1 flex items-center gap-2 hover:outline-2 outline-[var(--background)]">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
                Create <span class="max-sm:hidden">New Ticket</span>
            </button>
        </div>

        <!-- Empty State -->
        <div id="empty-state" class="bg-[var(--background)] rounded-2xl p-12 text-center shadow-lg hidden">
            <svg class="w-24 h-24 mx-auto text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            <h3 class="mb-2">No tickets yet</h3>
            <p class="mb-6">Create your first ticket to get started</p>
            <button id="empty-create-btn" class="btn-1">Create Ticket</button>
        </div>

        <!-- Ticket Grid -->
        <div id="ticket-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-3 hidden">
            <!-- Tickets will be dynamically inserted here -->
        </div>
    </main>

    
    <!-- Modal -->
    <div id="modal" class="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50 hidden" onclick="handleModalBackdropClick(event)">
        <div class="bg-[var(--background)] rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto shadow-2xl text-left" onclick="event.stopPropagation()">
            <form id="ticket-form" novalidate class="p-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-2xl font-bold text-gray-800" id="modal-title">Create New Ticket</h3>
                    <button type="button" id="close-modal-btn" class="text-gray-500 hover:text-gray-700 text-2xl">Ã—</button>
                </div>

                <div class="space-y-5">
                    <!-- Title -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">
                            Title <span class="text-red-500">*</span>
                        </label>
                        <input type="text" name="title" id="title-input" class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 border-gray-300" placeholder="Enter ticket title">
                        <span id="error-title" class="text-red-500 text-sm mt-1 hidden"></span>
                    </div>

                    <!-- Description -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                        <textarea name="description" id="description-input" rows="2" class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 border-gray-300" placeholder="Enter ticket description (optional)"></textarea>
                        <span id="error-description" class="text-red-500 text-sm mt-1 hidden"></span>
                    </div>

                    <!-- Status -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">
                            Status <span class="text-red-500">*</span>
                        </label>
                        <select name="status" id="status-select" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            <option value="open">Open</option>
                            <option value="in_progress">In Progress</option>
                            <option value="closed">Closed</option>
                        </select>
                    </div>

                    <!-- Priority -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Priority</label>
                        <select name="priority" id="priority-select" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>

                    <!-- Buttons -->
                    <div class="flex gap-3 pt-2">
                        <button type="button" id="cancel-btn" class="flex-1 px-6 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition font-medium">
                            Cancel
                        </button>
                        <button type="submit" id="submit-btn" class="flex-1 btn-1">
                            <span id="submit-btn-text">Create Ticket</span>
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // DOM Elements
            const userElement = document.querySelector('#user-name');
            const ticketsContainer = document.getElementById('ticket-grid');
            const emptyState = document.getElementById('empty-state');
            const ticketCountEl = document.getElementById('ticket-count');
            const openCreateModalBtn = document.getElementById('openCreateModal');
            const emptyCreateBtn = document.getElementById('empty-create-btn');
            const modal = document.getElementById('modal');
            const closeModalBtn = document.getElementById('close-modal-btn');
            const cancelBtn = document.getElementById('cancel-btn');
            const ticketForm = document.getElementById('ticket-form');
            const titleInput = document.getElementById('title-input');
            const descriptionInput = document.getElementById('description-input');
            const statusSelect = document.getElementById('status-select');
            const prioritySelect = document.getElementById('priority-select');
            const submitBtnText = document.getElementById('submit-btn-text');
            const modalTitle = document.getElementById('modal-title');
            const errorTitle = document.getElementById('error-title');
            const errorDescription = document.getElementById('error-description');

            // State
            let user = null;
            let tickets = [];
            let editingTicket = null;
            let formData = {
                title: '',
                description: '',
                status: 'open',
                priority: 'medium'
            };
            let errors = {
                title: '',
                status: '',
                description: ''
            };

            // Notification helper
            const notyf = new Notyf({ 
                duration: 5000, 
                types: [{ 
                    type: 'info', 
                    background: 'blue', 
                    icon: false 
                }] 
            });

            // Load user & tickets ONLY on mount
            const loadData = () => {
                notyf.open({ type: 'info', message: 'Loading tickets...' });

                const session = window.getSession();
                if (session) {
                    user = {
                        name: session.userName || session.email.split('@')[0],
                        email: session.email
                    };
                    if (userElement) userElement.textContent = user.name || 'User';
                }

                // Load tickets from localStorage
                tickets = JSON.parse(localStorage.getItem('ticketapp_tickets') || '[]');
                console.log('Loaded tickets:', tickets);
                console.log('Loaded user:', JSON.parse(localStorage.getItem('ticketapp_users')));
                updateTicketDisplay();
                notyf.success('Load successful');
            };

            // Update ticket display (called after any change)
            const updateTicketDisplay = () => {
                ticketsContainer.innerHTML = '';
                
                // Update count
                ticketCountEl.textContent = `${tickets.length} ticket${tickets.length !== 1 ? 's' : ''}`;

                if (tickets.length === 0) {
                    ticketsContainer.classList.add('hidden');
                    emptyState.classList.remove('hidden');
                } else {
                    ticketsContainer.classList.remove('hidden');
                    emptyState.classList.add('hidden');
                    
                    tickets.forEach(ticket => {
                        const ticketDiv = document.createElement('div');
                        ticketDiv.className = 'bg-[var(--background)] rounded-2xl p-6 shadow-md hover:shadow-lg transition flex flex-col';
                        ticketDiv.innerHTML = `
                            <div class="flex items-center justify-between mb-4">
                                <span class="px-3 py-1 rounded-full text-xs font-semibold border ${getStatusColor(ticket.status)}">
                                    ${ticket.status.replace('_', ' ').toUpperCase()}
                                </span>
                                <span class="text-xs font-semibold ${getPriorityColor(ticket.priority)}">
                                    ${(ticket.priority || 'medium').toUpperCase()}
                                </span>
                            </div>
                            <h3 class="text-lg font-bold text-gray-800 mb-2 line-clamp-2 grow">${escapeHtml(ticket.title)}</h3>
                            <p class="text-sm text-gray-600 mb-4 line-clamp-3">${escapeHtml(ticket.description || '')}</p>
                            <div class="flex gap-2">
                                <button class="edit-btn flex-1 px-4 py-2 bg-indigo-100 text-indigo-700 rounded-lg hover:bg-indigo-200 transition text-sm font-medium">Edit</button>
                                <button class="delete-btn flex-1 px-4 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition text-sm font-medium">Delete</button>
                            </div>
                        `;
                        
                        const editBtn = ticketDiv.querySelector('.edit-btn');
                        const deleteBtn = ticketDiv.querySelector('.delete-btn');
                        
                        editBtn.addEventListener('click', () => openEditModal(ticket));
                        deleteBtn.addEventListener('click', () => handleDelete(ticket.id));
                        
                        ticketsContainer.appendChild(ticketDiv);
                    });
                }
            };

            // Escape HTML to prevent XSS
            const escapeHtml = (text) => {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            };

            // Modal: Open for Create
            const openCreateModal = () => {
                editingTicket = null;
                formData = { title: '', description: '', status: 'open', priority: 'medium' };
                errors = { title: '', status: '', description: '' };
                
                titleInput.value = '';
                descriptionInput.value = '';
                statusSelect.value = 'open';
                prioritySelect.value = 'medium';
                
                modalTitle.textContent = 'Create New Ticket';
                submitBtnText.textContent = 'Create Ticket';
                
                errorTitle.classList.add('hidden');
                errorDescription.classList.add('hidden');
                
                modal.classList.remove('hidden');
            };

            // Modal: Open for Edit
            const openEditModal = (ticket) => {
                editingTicket = ticket;
                formData = {
                    title: ticket.title,
                    description: ticket.description || '',
                    status: ticket.status,
                    priority: ticket.priority || 'medium'
                };
                errors = { title: '', status: '', description: '' };
                
                titleInput.value = formData.title;
                descriptionInput.value = formData.description;
                statusSelect.value = formData.status;
                prioritySelect.value = formData.priority;
                
                modalTitle.textContent = 'Edit Ticket';
                submitBtnText.textContent = 'Save Changes';
                
                errorTitle.classList.add('hidden');
                errorDescription.classList.add('hidden');
                
                modal.classList.remove('hidden');
            };

            // Modal: Close (refactored to always work)
            const closeModalHandler = () => {
                modal.classList.add('hidden');
                editingTicket = null;
                formData = { title: '', description: '', status: 'open', priority: 'medium' };
                errors = { title: '', status: '', description: '' };
                
                titleInput.value = '';
                descriptionInput.value = '';
                statusSelect.value = 'open';
                prioritySelect.value = 'medium';
                
                errorTitle.classList.add('hidden');
                errorDescription.classList.add('hidden');
            };

            // Handle backdrop click (only close if clicking outside modal content)
            window.handleModalBackdropClick = (e) => {
                if (e.target === modal) {
                    closeModalHandler();
                }
            };

            // Handle input changes
            const handleChange = (e) => {
                const { name, value } = e.target;
                formData[name] = value;
                errors[name] = '';
                
                if (name === 'title') errorTitle.classList.add('hidden');
                if (name === 'description') errorDescription.classList.add('hidden');
            };

            // Validation
            const validate = () => {
                errors = { title: '', status: '', description: '' };
                
                if (!formData.title.trim()) {
                    errors.title = 'Title is required';
                    errorTitle.textContent = errors.title;
                    errorTitle.classList.remove('hidden');
                }
                
                const validStatuses = ['open', 'in_progress', 'closed'];
                if (!formData.status || !validStatuses.includes(formData.status)) {
                    errors.status = 'Valid status is required';
                }
                
                if (formData.description && formData.description.length > 0 && formData.description.length < 3) {
                    errors.description = 'Description must be at least 3 characters';
                    errorDescription.textContent = errors.description;
                    errorDescription.classList.remove('hidden');
                }
                
                return Object.values(errors).every(err => !err);
            };

            // Submit (Create or Update)
            const handleSubmit = (e) => {
                e.preventDefault();
                
                if (!validate()) {
                    notyf.error('Please fix the errors in the form');
                    return;
                }

                if (editingTicket) {
                    // Update existing ticket
                    tickets = tickets.map(t =>
                        t.id === editingTicket.id
                            ? { ...t, ...formData, updatedAt: new Date().toISOString() }
                            : t
                    );
                    localStorage.setItem('ticketapp_tickets', JSON.stringify(tickets));
                    notyf.success('Successfully <b>updated</b> ticket');
                } else {
                    // Create new ticket
                    const newTicket = {
                        id: crypto.randomUUID(),
                        ...formData,
                        createdAt: new Date().toISOString(),
                        updatedAt: new Date().toISOString()
                    };
                    tickets = [...tickets, newTicket];
                    localStorage.setItem('ticketapp_tickets', JSON.stringify(tickets));
                    notyf.success('Successfully <b>added</b> new ticket');
                }

                // Update display and close modal
                updateTicketDisplay();
                closeModalHandler();
            };

            // Delete ticket
            const handleDelete = (ticketId) => {
                if (confirm('Are you sure you want to delete this ticket?')) {
                    tickets = tickets.filter(t => t.id !== ticketId);
                    localStorage.setItem('ticketapp_tickets', JSON.stringify(tickets));
                    notyf.success('Successfully removed ticket');
                    updateTicketDisplay();
                }
            };

            // Status & Priority Color Helpers
            const getStatusColor = (status) => {
                switch (status) {
                    case 'open': return 'bg-green-100 text-green-800 border-green-300';
                    case 'in_progress': return 'bg-amber-100 text-amber-800 border-amber-300';
                    case 'closed': return 'bg-gray-100 text-gray-800 border-gray-300';
                    default: return 'bg-gray-100 text-gray-800 border-gray-300';
                }
            };

            const getPriorityColor = (priority) => {
                switch (priority) {
                    case 'high': return 'text-red-600';
                    case 'medium': return 'text-amber-600';
                    case 'low': return 'text-green-600';
                    default: return 'text-gray-600';
                }
            };

            // Load data ONLY on mount
            loadData();

            // Event listeners
            openCreateModalBtn.addEventListener('click', openCreateModal);
            emptyCreateBtn.addEventListener('click', openCreateModal);
            closeModalBtn.addEventListener('click', closeModalHandler);
            cancelBtn.addEventListener('click', closeModalHandler);
            ticketForm.addEventListener('submit', handleSubmit);
            titleInput.addEventListener('input', handleChange);
            descriptionInput.addEventListener('input', handleChange);
            statusSelect.addEventListener('change', handleChange);
            prioritySelect.addEventListener('change', handleChange);
        });
    </script>
{% endblock %}